on:
  pull_request:
  push:
    branches: ["main"]

name: Rust

env:
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  CARGO_INCREMENTAL: 0
  RUSTC_WRAPPER: sccache

jobs:
  fmt-crank-check:
    name: Format + check
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v5
        with:
          lfs: true

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.89.0
          components: rustfmt, clippy

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        uses: awalsh128/cache-apt-pkgs-action@v1.5.3
        with:
          packages: libxcb-xfixes0-dev libxkbcommon-dev libssl-dev libgtk-3-dev # libgtk-3-dev is used by rfd
          version: 1.0
          execute_install_scripts: true

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: check --all-features
        run: cargo check --locked --all-features --all-targets

      - name: check --no-default-features
        run: cargo check --locked --no-default-features --all-targets

      - name: Rustfmt
        run: cargo fmt --all -- --check

      - name: cargo doc
        run: cargo doc --no-deps --all-features

      - name: cargo doc --document-private-items
        run: cargo doc --document-private-items --no-deps --all-features

      - name: clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # ---------------------------------------------------------------------------

  check_wasm:
    name: Check wasm32 + wasm-bindgen
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.89.0
          targets: wasm32-unknown-unknown

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Check wasm32
        run: RUSTFLAGS='--cfg getrandom_backend="wasm_js"' cargo check -p brush-wasm --target wasm32-unknown-unknown

  # ---------------------------------------------------------------------------

  cargo-deny:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
          - target: aarch64-linux-android
          - target: wasm32-unknown-unknown
          - target: x86_64-pc-windows-msvc
          - target: x86_64-unknown-linux-musl

    name: cargo-deny ${{ matrix.target }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v5
      - uses: EmbarkStudios/cargo-deny-action@v2
        with:
          rust-version: "1.89.0"
          log-level: error
          command: check
          arguments: --target  ${{ matrix.target }}

  # ---------------------------------------------------------------------------

  # ---------------------------------------------------------------------------

  tests:
    name: Run tests
    # We run the tests on macOS because it will run with an actual GPU
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v5
        with:
          lfs: true

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.89.0

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all --all-features

      - name: Run doc-tests
        run: cargo test --all --all-features --doc
