#!/usr/bin/env python3
import argparse
import subprocess
import tomllib
import os
import shutil
import zipfile
import tempfile
import json

def parse_cargo_toml():
    with open('Cargo.toml', 'rb') as f:
        cargo_toml = tomllib.load(f)
    app_name = cargo_toml['package']['name']
    app_id = cargo_toml['package']['metadata']['bundle']['identifier']
    return app_name, app_id

def get_sdk_path():
    return subprocess.check_output(['xcrun', '--sdk', 'iphoneos', '--show-sdk-path']).decode().strip()

SDK_PATH = get_sdk_path()

env_vars = {
    'PATH': f"/usr/bin:{os.environ.get('PATH', '')}",
    'SDKROOT': SDK_PATH,
    'IPHONEOS_DEPLOYMENT_TARGET': '14.0',
    'CARGO_BUILD_TARGET': 'aarch64-apple-ios',
    'TARGET_CC': 'clang',
    'TARGET_AR': 'ar',
    'MACOSX_DEPLOYMENT_TARGET': ''
}

def build(args):
    # Build scripts will use the host target (macOS)
    env_vars = {
        'PATH': f"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin:{os.environ.get('PATH', '')}",
        'MACOSX_DEPLOYMENT_TARGET': '11.0',
        'SDKROOT': subprocess.check_output(['xcrun', '--sdk', 'macosx', '--show-sdk-path']).decode().strip(),
    }
    
    # Only specify iOS target for the actual build command
    deps_command = [
        'cargo', 'build',
        '--target', 'aarch64-apple-ios',
        '--workspace',
        '-p', 'brush-viewer',
        '-p', 'brush-kernel',
        '-p', 'brush-wgsl',
        '-p', 'brush-ui',
        '-p', 'brush-train',
        '-p', 'brush-render'
    ]
    
    if args.release:
        deps_command.append('--release')
    
    subprocess.run(deps_command, env=env_vars, check=True)

def ipa(args):
    print("Creating IPA...")
    build(args)
    
    app_name, _ = parse_cargo_toml()
    build_type = 'Release' if args.release else 'Debug'
    
    # Path to the built .app
    app_path = f'build/{build_type}-iphoneos/{app_name}.app'
    if not os.path.exists(app_path):
        print(f"Error: {app_path} does not exist")
        return
    
    # Create Payload directory
    temp_dir = tempfile.mkdtemp()
    payload_dir = os.path.join(temp_dir, "Payload")
    os.makedirs(payload_dir, exist_ok=True)
    
    # Copy .app to Payload
    app_in_payload = os.path.join(payload_dir, os.path.basename(app_path))
    print(f"Copying {app_path} to {app_in_payload}")
    shutil.copytree(app_path, app_in_payload, symlinks=True, dirs_exist_ok=True)
    
    # Create IPA
    ipa_path = f'{app_name}.ipa'
    print(f"Creating IPA at {ipa_path}")
    
    # Change to temp directory before creating zip to maintain correct structure
    original_dir = os.getcwd()
    os.chdir(temp_dir)
    
    try:
        with zipfile.ZipFile(os.path.join(original_dir, ipa_path), 'w', zipfile.ZIP_DEFLATED) as ipa_file:
            for root, _, files in os.walk('Payload'):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, temp_dir)
                    print(f"Adding {file_path} as {arcname} to IPA")
                    ipa_file.write(file_path, arcname)
    finally:
        os.chdir(original_dir)
    
    # Verify IPA contents
    with zipfile.ZipFile(ipa_path, 'r') as ipa_file:
        contents = ipa_file.namelist()
        print("IPA contents:", contents)
        if not any(name.startswith('Payload/') for name in contents):
            print("Warning: IPA file may be malformed - no Payload directory found")
            return
    
    if os.path.exists(ipa_path) and os.path.getsize(ipa_path) > 0:
        print(f"Successfully created {ipa_path}")
    else:
        print(f"Failed to create {ipa_path}")
    
    # Clean up temp directory
    shutil.rmtree(temp_dir)

def get_target(args):
    target = 'aarch64-apple-ios'
    if args.x86:
        target = 'x86_64-apple-ios'
    elif args.sim:
        target = 'aarch64-apple-ios-sim'
    if args.target:
        target = args.target
    return target

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('command', choices=['build', 'ipa'])
    parser.add_argument('--x86', action='store_true')
    parser.add_argument('--sim', action='store_true')
    parser.add_argument('--target', type=str)
    parser.add_argument('--release', '-r', action='store_true')
    parser.add_argument('--ipad', action='store_true')
    
    args = parser.parse_args()
    
    if args.command == 'build':
        build(args)
    elif args.command == 'ipa':
        ipa(args)

if __name__ == '__main__':
    main()